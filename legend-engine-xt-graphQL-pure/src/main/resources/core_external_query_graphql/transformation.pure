// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


###Pure
import meta::external::query::graphQL::metamodel::*;
import meta::external::query::graphQL::metamodel::typeSystem::*;
import meta::external::query::graphQL::binding::toPure::*;

function meta::external::query::graphQL::binding::toPure::primitiveTypeMapping() : Pair<String, meta::pure::metamodel::type::Type>[*]
{
    [
      pair('String', String),
      pair('Boolean', Boolean),
      pair('Int', Integer),
      pair('Float', Float),
      pair('ID', String)
    ]
}

function meta::external::query::graphQL::binding::toPure::typeSystem::graphQLTypeSystemtoPure(doc:Document[1], package:String[1]) : meta::pure::metamodel::type::Type[*]
{
  let pack = buildTransientPackageFromString($package);

  // Pass 1
  let typesByName = $doc.definitions->map(def|
    $def->match(
      [
        o : ObjectTypeDefinition[1] | let no = newClass($o.name);
                                      let cp = ^$no(package = $pack);
                                      pair($o.name, $cp);,
        e : EnumTypeDefinition[1] | let ne = newEnumeration($e.name, $e.values.value);
                                    let ep = ^$ne(package = $pack);
                                    pair($e.name, $ep);
      ]
    )
  )->concatenate(meta::external::query::graphQL::binding::toPure::primitiveTypeMapping())->newMap();

  // Pass 2
  $doc.definitions->map(def|
    $def->match(
      [
        o : ObjectTypeDefinition[1] | let ownerType = $typesByName->get($o.name)->toOne();
                                      let ownerGType = ^GenericType(rawType=$ownerType);
                                      let properties = $o.fields->map(f |
                                          let targetName = $f.type->match([
                                            o:NamedTypeReference[1] | pair(if($o.nullable,|ZeroOne,|PureOne), $o.name),
                                            l:ListTypeReference[1] | pair(ZeroMany, $l.itemType->cast(@NamedTypeReference).name)
                                          ]);
                                          let targeType = $typesByName->get($targetName.second)->toOne();
                                          meta::pure::functions::meta::newProperty($f.name, $ownerGType, ^GenericType(rawType=$targeType), $targetName.first);
                                      );
                                      $ownerType->mutateAdd('properties', $properties);,
        e : EnumTypeDefinition[1] | $typesByName->get($e.name)->toOne();
      ]
    )
  );
}

function meta::external::query::graphQL::binding::toPure::buildTransientPackageFromString(package:String[1]) : Package[1]
{
  $package->split('::')->fold({a,b|^Package(name = $a, package=$b)}, ^Package());
}



###Pure
import meta::external::query::graphQL::metamodel::*;
import meta::external::query::graphQL::metamodel::value::*;
import meta::external::query::graphQL::metamodel::executable::*;
import meta::external::query::graphQL::transformation::queryToPure::*;
import meta::pure::graphFetch::*;

function meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure(query:Document[1], root: Class<Any>[1]) : RootGraphFetchTree<Any>[1]
{
  let types = $root->meta::external::query::graphQL::binding::fromPure::introspection::scanTypes([]);
  let fragments = $query.definitions->map(d|
    $d->match([
      
      f : FragmentDefinition[1]| pair($f.name, list($f.selectionSet->transformSelectionToPure($types->filter(c|$c.name == $f.typeCondition)->toOne()->cast(@Class<Any>))));,
      o : OperationDefinition[1]| pair('__Query', list($o.selectionSet->transformSelectionToPure($root)));
    ])    
  )->newMap();

  ^RootGraphFetchTree<Any>
  (
    class = $root,
    subTrees = $fragments->get('__Query')->toOne().values->buildGraphFetchFromIntermediateNodes($fragments)
  );
}



Class <<access.private>> meta::external::query::graphQL::transformation::queryToPure::IntermediateNode
{
}

Class <<access.private>> meta::external::query::graphQL::transformation::queryToPure::IntermediatePropertyNode extends IntermediateNode
{
  children :  meta::external::query::graphQL::transformation::queryToPure::IntermediateNode[*];
  propertyFetch : PropertyGraphFetchTree[1];
}

Class <<access.private>> meta::external::query::graphQL::transformation::queryToPure::IntermediateFragmentNode extends IntermediateNode
{
  name : String[1];
}

function <<access.private>> meta::external::query::graphQL::transformation::queryToPure::transformSelectionToPure(selection:Selection[*], root:Class<Any>[1]) : meta::external::query::graphQL::transformation::queryToPure::IntermediateNode[*]
{
  $selection->map(s|$s->match(
    [
      field : Field[1] |let property = $root->meta::pure::functions::meta::hierarchicalProperties()->concatenate($root->meta::pure::functions::meta::hierarchicalQualifiedProperties())->filter(p|$p.name == $field.name);
                        assert(!$property->isEmpty(), |'Property "'+$field.name+'" can\'t be found in the type '+$root->elementToPath());
                        ^meta::external::query::graphQL::transformation::queryToPure::IntermediatePropertyNode
                        (
                          propertyFetch = ^PropertyGraphFetchTree
                                          (
                                            property = $property->toOne(),
                                            parameters = $field.arguments->map(a|$a.value->match(
                                                                                            [
                                                                                              s:StringValue[1]| ^InstanceValue(multiplicity=PureOne, genericType=^GenericType(rawType=String), values=$s.value),
                                                                                              b:BooleanValue[1]| ^InstanceValue(multiplicity=PureOne, genericType=^GenericType(rawType=Boolean), values=$b.value)
                                                                                            ]
                                                                                          )
                                                                           )
                                          ),
                          children = if ($field.selectionSet->isEmpty(),|[],|$field.selectionSet->transformSelectionToPure($property->toOne()->functionReturnType().rawType->cast(@Class<Any>)->toOne()))
                        );,
      fragmentId : FragmentSpread[1] | ^meta::external::query::graphQL::transformation::queryToPure::IntermediateFragmentNode(name = $fragmentId.name);
    ]
  ));
}

function <<access.private>> meta::external::query::graphQL::transformation::queryToPure::buildGraphFetchFromIntermediateNodes(nodes : meta::external::query::graphQL::transformation::queryToPure::IntermediateNode[*], fragments : Map<String, List<meta::external::query::graphQL::transformation::queryToPure::IntermediateNode>>[1]) : PropertyGraphFetchTree[*]
{
  $nodes->map(n | $n->match(
      [
        p : meta::external::query::graphQL::transformation::queryToPure::IntermediatePropertyNode[1] | let val = $p.propertyFetch;
                                                                                           ^$val
                                                                                           (
                                                                                             subTrees = $p.children->buildGraphFetchFromIntermediateNodes($fragments)
                                                                                           );,
        f : meta::external::query::graphQL::transformation::queryToPure::IntermediateFragmentNode[1] | $fragments->get($f.name).values->buildGraphFetchFromIntermediateNodes($fragments)
      ]
    )
  )
}


###Pure
import meta::external::query::graphQL::transformation::queryToPure::*;

function meta::external::query::graphQL::transformation::queryToPure::getPlansFromGraphQL(
                                                                          cl:Class<Any>[1],
                                                                          mapping:meta::pure::mapping::Mapping[1],
                                                                          runtime:meta::pure::runtime::Runtime[1],
                                                                          query:meta::external::query::graphQL::metamodel::Document[1],
                                                                          extensions:meta::pure::extension::Extension[*]
                                                                      ):Pair<String, meta::pure::executionPlan::ExecutionPlan>[*]
{
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($query, $cl);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree();
  $res->map(r|
              pair(
                $r.first,
                meta::pure::executionPlan::executionPlan(
                  $r.second,
                  $mapping,
                  $runtime,
                  $extensions
                )
              )
        );
}

Class meta::external::query::graphQL::transformation::queryToPure::GraphFetchResult
{
  graphFetchTree : meta::pure::graphFetch::RootGraphFetchTree<Any>[1];
  explodedDomain : Pair<String, FunctionDefinition<{->Any[*]}>>[*];
}

function meta::external::query::graphQL::transformation::queryToPure::getGraphFetchFromGraphQL(cl:Class<Any>[1], query:meta::external::query::graphQL::metamodel::Document[1]):GraphFetchResult[1]
{
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($query, $cl);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree();
  ^GraphFetchResult
  (
    graphFetchTree = $graphFetch,
    explodedDomain = $res->map(r|pair($r.first, $r.second))
  );
}

###Pure
import meta::external::query::graphQL::transformation::mutationToPure::*;
import meta::external::query::graphQL::metamodel::executable::*;

function meta::external::query::graphQL::transformation::mutationToPure::executeQueryClassProperty(qp: QualifiedProperty<Any>[1], arguments: Map<String, meta::json::JSONElement>[1]): Any[*]
{
  $qp;
  // let debugContext = ^DebugContext(debug = false, space = '');
  // let executionContext = ^ExecutionContext();
  // let result = execute(
  //   $allFirms->toOne()->cast(@FunctionDefinition<{->Any[*]}>),
  //   $resolvedInteractiveApplication.mapping,
  //   $resolvedInteractiveApplication.runtime,
  //   $executionContext, 
  //   meta::pure::router::extension::defaultRelationalExtensions(),
  //   $debugContext);
}

// function meta::external::query::graphQL::transformation::mutationToPure::graphQLDocumentToPure(cl: Class<Any>[1], query: meta::external::query::graphQL::metamodel::Document[1]): Pair<AbstractProperty<Any>, Map<String, Any>>[*]
function meta::external::query::graphQL::transformation::mutationToPure::graphQLDocumentToPure(cl: Class<Any>[1], query: meta::external::query::graphQL::metamodel::Document[1]): Pair<AbstractProperty<Any>, Map<String, meta::json::JSONElement>>[*]
{
  $query.definitions->map(d|
    $d->match([
      o : OperationDefinition[1]| if($o.type == meta::external::query::graphQL::metamodel::executable::OperationType.mutation, 
                                     |let arguments = $o.selectionSet->transformMutationSelectionToPure($cl)->toOne();
                                      let property = $o.selectionSet->map(s|$s->match(field : Field[1] | $cl->allProperties()->filter(p | $p.name == $field.name)->toOne()))->toOne();
                                      pair($property, $arguments);,
                                     |[]);

    ])
  )->toOne();
}

// function meta::external::query::graphQL::transformation::mutationToPure::transformMutationSelectionToPure(selection: Selection[*], cl: Class<Any>[1]): Map<String, Any>[1]
function meta::external::query::graphQL::transformation::mutationToPure::transformMutationSelectionToPure(selection: Selection[*], cl: Class<Any>[1]): Map<String, meta::json::JSONElement>[1]
{
  $selection->map(s|$s->match(
    field : Field[1]  | let property = $cl->allProperties()->filter(p | $p.name == $field.name)->toOne();
                        let returnType = $property.genericType.rawType->cast(@Class<Any>);
                        let variables = $property->functionType()->evaluateAndDeactivate().parameters->evaluateAndDeactivate()->filter(p|$p.name != 'this')->map(p|pair($p.name, $p))->newMap();
                        let parameters = $field.arguments->map(a | let variable = $variables->get($a.name);
                                                                  let transformed = meta::external::query::graphQL::transformation::mutationToPure::transformGraphQLTypeToPure($a.value, $variable.genericType.rawType->toOne());
                                                                  if ($transformed->isEmpty(),|[], |pair($a.name, $transformed->toOne()));
                        )->newMap();
                        $parameters;
  ))->toOne();
}

function meta::external::query::graphQL::transformation::mutationToPure::transformGraphQLTypeToPure(value: meta::external::query::graphQL::metamodel::value::Value[1], pureType: Type[1]): meta::json::JSONElement[0..1]
{
  $value->match(
    [
      s : meta::external::query::graphQL::metamodel::value::StringValue[1] | ^meta::json::JSONString(value = $s.value);,
      n : meta::external::query::graphQL::metamodel::value::NullValue[1] | ^meta::json::JSONNull();,
      l : meta::external::query::graphQL::metamodel::value::ListValue[1] | ^meta::json::JSONArray(values = $l.values->map(v | meta::external::query::graphQL::transformation::mutationToPure::transformGraphQLTypeToPure($v, $pureType)));,
      i : meta::external::query::graphQL::metamodel::value::IntValue[1] | ^meta::json::JSONNumber(value = $i.value);,
      f : meta::external::query::graphQL::metamodel::value::FloatValue[1] | ^meta::json::JSONNumber(value = $f.value);,
      e : meta::external::query::graphQL::metamodel::value::EnumValue[1] | ^meta::json::JSONString(value = $e.value);,//^$pureType(value = $e.value);,
      b : meta::external::query::graphQL::metamodel::value::BooleanValue[1] | ^meta::json::JSONBoolean(value = $b.value);,
      // o : meta::external::query::graphQL::metamodel::value::ObjectValue[1] |  let properties = $o.values->map(v | let newValue = meta::external::query::graphQL::transformation::mutationToPure::transformGraphQLTypeToPure($v.value, $pureType->cast(@Class<Any>)->allProperties()->filter(p|$p.name == $v.name).genericType.rawType->toOne());
      //                                                                                                             ^KeyValue(key = $v.name, value = $newValue););
      //                                                                         println($pureType);
      //                                                                         dynamicNew(^GenericType(rawType = $pureType), $properties);
      o : meta::external::query::graphQL::metamodel::value::ObjectValue[1] |  ^meta::json::JSONObject(keyValuePairs = $o.values->map(v | let newValue = meta::external::query::graphQL::transformation::mutationToPure::transformGraphQLTypeToPure($v.value, $pureType->cast(@Class<Any>)->allProperties()->filter(p|$p.name == $v.name).genericType.rawType->toOne());
                                                                                                                                         ^meta::json::JSONKeyValue(key = ^meta::json::JSONString(value = $v.name), value = $newValue->toOne());));
    ]
  );
}

// function meta::external::query::graphQL::transformation::mutationToPure::transformGraphQLTypeToPure(value: meta::external::query::graphQL::metamodel::value::Value[1], pureType: Type[1]): Any[0..1]
// {
//   $value->match(
//     [
//       s : meta::external::query::graphQL::metamodel::value::StringValue[1] | $s.value;,
//       n : meta::external::query::graphQL::metamodel::value::NullValue[1] | ^Nil();,
//       l : meta::external::query::graphQL::metamodel::value::ListValue[1] | ^meta::pure::functions::collection::List<Any>(values = $l.values->map(v | meta::external::query::graphQL::transformation::mutationToPure::transformGraphQLTypeToPure($v, $pureType)));,
//       i : meta::external::query::graphQL::metamodel::value::IntValue[1] | $i.value;,
//       f : meta::external::query::graphQL::metamodel::value::FloatValue[1] | $f.value;,
//       // e : meta::external::query::graphQL::metamodel::value::EnumValue[1] | let ne = newEnumeration($pureType.name->toOne(), $e.value);
//       //                                                                      let package = pathToPackage($pureType->cast(@PackageableElement).package->toOne()->elementToPath());
//       //                                                                      ^$ne(package = $package);,
//       b : meta::external::query::graphQL::metamodel::value::BooleanValue[1] | $b.value;,
//       // o : meta::external::query::graphQL::metamodel::value::ObjectValue[1] |  let transientClass = newClass($pureType.name->toOne());
//       //                                                                         let package = pathToPackage($pureType->cast(@PackageableElement).package->toOne()->elementToPath());
//       //                                                                         let transientType = ^$transientClass(package = $package);
//       //                                                                         let ownerGenericType = ^GenericType(rawType = $transientType);
//       //                                                                         let propertiesAndValues = $o.values->map(v | let targetProperty = $pureType->cast(@Class<Any>)->allProperties()->filter(p|$p.name == $v.name);
//       //                                                                                                                      let targetType = $targetProperty.genericType.rawType->toOne();
//       //                                                                                                                      let newValue = meta::external::query::graphQL::transformation::mutationToPure::transformGraphQLTypeToPure($v.value, $targetType);
//       //                                                                                                                      let property = meta::pure::functions::meta::newProperty($v.name, $ownerGenericType, ^GenericType(rawType = $targetType), $targetProperty.multiplicity->toOne());
//       //                                                                                                                      pair($property, ^KeyValue(key = $v.name, value = $newValue)););
//       //                                                                         let properties = $propertiesAndValues->map(pv | $pv.first);
//       //                                                                         let values = $propertiesAndValues->map(pv | $pv.second);
//       //                                                                         $transientType->mutateAdd('properties', $properties);
//       //                                                                         dynamicNew($transientType, $values);
//       o : meta::external::query::graphQL::metamodel::value::ObjectValue[1] |  let package = pathToPackage($pureType->cast(@PackageableElement).package->toOne()->elementToPath());
//                                                                               let transientClass = ^Class<Any>(name = $pureType.name->toOne(), package = $package);
//                                                                               let ownerGenericType = ^GenericType(rawType = $transientClass);
//                                                                               let propertiesAndValues = $o.values->map(v | let targetProperty = $pureType->cast(@Class<Any>)->allProperties()->filter(p|$p.name == $v.name);
//                                                                                                                            let targetType = $targetProperty.genericType.rawType->toOne();
//                                                                                                                            let newValue = meta::external::query::graphQL::transformation::mutationToPure::transformGraphQLTypeToPure($v.value, $targetType);
//                                                                                                                            let property = meta::pure::functions::meta::newProperty($v.name, $ownerGenericType, ^GenericType(rawType = $targetType), $targetProperty.multiplicity->toOne());
//                                                                                                                            pair($property, ^KeyValue(key = $v.name, value = $newValue)););
//                                                                               let properties = $propertiesAndValues->map(pv | $pv.first);
//                                                                               let values = $propertiesAndValues->map(pv | $pv.second);
//                                                                               $transientClass->mutateAdd('properties', $properties);
//                                                                               dynamicNew($transientClass, $values);                                                                              
//     ]
//   );
// }
