// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::project::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::platform::objectReference::*;
import meta::pure::extension::*;
import meta::pure::mapping::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::engine::java::graphFetch::common::*;
import meta::pure::executionPlan::engine::java::naming::*;
import meta::pure::write::executionPlan::*;


function meta::pure::write::executionPlan::platformBinding::legendJava::writeLegendJavaPlatformBindingExtension(): LegendJavaPlatformBindingExtension[1]
{
   ^LegendJavaPlatformBindingExtension
   (
      platformId = legendJavaPlatformBindingId(),

      id = 'WriteLegendJavaPlatformBindingExtension',

      // Node based extensions ------------------------------------------------------

      supportedExecutionNodes = [
        WriteExecutionNode
      ],

      extraChildNodesWithIndex = {node: ExecutionNode[1] |
         $node->match([
            n: ExecutionNode[1]                     | []
         ])
      },

      updateGenerationContextForNode = {node: ExecutionNode[1], context: GenerationContext[1], path: String[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            n: ExecutionNode[1]                             | $context
         ])
      },

      generateLegendJavaCodeForNode = {node: ExecutionNode[1], path: String[1], context: GenerationContext[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            n: ExecutionNode[1]                           | ^GeneratedCode()
         ])
      },

      generateLegendJavaCodeForExtraChildNodes = {node: ExecutionNode[1], project: Project[0..1], path: String[1], context: GenerationContext[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            n: ExecutionNode[1] | ^GeneratedNode(node = $node, project = $project)
         ])
      },

      // ------------------------------------------------------ Node based extensions


      // Adhoc extensions -----------------------------------------------------------      

      adhocExtensions = []

      // ----------------------------------------------------------- Adhoc extensions

   )
}
